{"version":3,"sources":["components/button/index.js","components/button/button.js","components/board/index.js","components/board/board.js","components/display/index.js","components/display/display.js","assemble/index.js","assemble/assemble.js","handlers/handleCheck.js","handlers/handleDraw.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","key","onClick","e","handleClick","target","value","Board","className","children","Display","winner","draw","turn","Assemble","formHandler","preventDefault","setState","boardArray","gameActive","gameIndex","index","boardKeys","state","console","log","win","arrayKey","winCombination","i","winWin","x","y","z","handleCheck","board","length","handleDraw","bind","this","map","type","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.44ff8573.chunk.js","sourcesContent":["import Button from './button';\r\n\r\nexport default Button;","import React from 'react';\r\nimport './button.css';\r\n\r\nconst button = (props) => {\r\n    return (\r\n        <div>\r\n            <button key={props.key} onClick={e => props.handleClick(e.target.key)}>{props.value}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default button;","import Board from './board.js';\r\n\r\nexport default Board;","import React from 'react';\r\nimport './board.css';\r\nimport Button from '../button';\r\n\r\nconst board = (props) => {\r\n\r\n    return (\r\n        <div className=\"mainBoard\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default board;","import Display from './display';\r\n\r\nexport default Display;","import React from 'react';\r\nimport './display.css';\r\n\r\nconst display = (props) => {\r\n    return (\r\n        <div className=\"mainDisplay\">\r\n            {\r\n                props.winner ? <p>{props.winner} wins the game</p> : props.draw ? <p>Its a Draw</p> : <p> {props.turn} turn</p>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default display;","import Assemble from './assemble.js';\r\n\r\nexport default Assemble;","import React, { Component } from 'react';\nimport Button from '../components/button';\r\nimport Board from '../components/board';\r\nimport { handleCheck } from '../handlers/handleCheck';\r\nimport Display from '../components/display';\r\nimport './assemble.css';\r\nimport { handleDraw } from '../handlers/handleDraw';\r\n\nclass assemble extends Component {\n    constructor(props) {\n        super(props);\r\n        this.state = {\r\n            boardArray: ['', '', '', '', '', '', '', '', ''],\r\n            gameActive: true,\r\n            gameIndex: true,\r\n            winner: \"\",\r\n            turn: \"X\",\r\n            draw:\"\"\r\n\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.formHandler = this.formHandler.bind(this);\r\n    }\n\n\n    formHandler = (e) => {\n        e.preventDefault();\r\n        this.setState({\r\n            boardArray: ['', '', '', '', '', '', '', '', ''],\r\n            gameActive: true,\r\n            gameIndex: true,\r\n            winner: \"\",\r\n            turn: \"X\",\r\n            draw:\"\"\r\n        })\r\n    }\n\n    handleClick = (index) => {\n        const boardKeys = [...this.state.boardArray];\r\n        //this.handleWinner();\r\n\r\n        if (boardKeys[index] || this.state.winner) {\r\n           \r\n            return;\r\n        } \r\n\r\n        boardKeys[index] = this.state.gameIndex ? \"X\" : \"O\";\r\n        const turn = boardKeys[index] === \"X\" ? \"O\" : \"X\";\r\n       \r\n        this.setState({\r\n            boardArray: boardKeys,\r\n            gameIndex: !this.state.gameIndex,\r\n            turn: turn,\r\n            \r\n        })\r\n        \r\n                if (!this.state.winner) {\r\n                    console.log(\"I working\")\r\n                    const win = handleCheck(boardKeys);\r\n                    const draw = handleDraw(boardKeys);\r\n                    if (win) {\r\n                        this.setState({\r\n                            winner: win,\r\n                        })\r\n                       // console.log(\"I win\")\r\n                    }\r\n                    if (draw) {\r\n                        console.log(\"its a draw\");\r\n                        this.setState({\r\n                            draw: \"draw\",\r\n                        })\r\n                    }\r\n                }\r\n        \r\n    }\n    \n    render() {\n        return (\n            <div className=\"mainAssemble\">\n                <Display winner={this.state.winner} turn={this.state.turn} draw={this.state.draw}/>\n                <Board>\n                    {\r\n                        this.state.boardArray.map((value, index) => (\r\n                            <Button key={index} handleClick={() => this.handleClick(index)} value={this.state.boardArray[index]} />\r\n                        ))\n                    }\n                </Board>  \n                <>\n                    {\n                        this.state.winner ?\r\n                            <form className=\"inputForm\" onClick={(e) => this.formHandler(e)}>\r\n                                <input className=\"inputButton\" type=\"button\" value=\"New Game\" />\r\n                            </form> :\r\n                            this.state.draw ?\r\n                                <form className=\"inputForm\" onClick={(e) => this.formHandler(e)}>\r\n                                    <input className=\"inputButton\" type=\"button\" value=\"New Game\" />\r\n                                </form> :\r\n                            <p className=\"footerMessage\">Tic-Tac-Toe</p>\r\n                    }\n                </>\n            </div>\n        );\n    }\n}\n\nexport default assemble;\n","export function handleCheck(arrayKey) {\r\n    //const youWin = false;\r\n\r\n    const winCombination = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n\r\n    for (let i = 0; i <= 7; i++) {\r\n        const winWin = winCombination[i];\r\n        let x = arrayKey[winWin[0]];\r\n        let y = arrayKey[winWin[1]];\r\n        let z = arrayKey[winWin[2]];\r\n        if (x === '' || y === '' || z === '') {\r\n            continue;\r\n        }\r\n        if (x === y && y === z) {\r\n            // youWin = true;\r\n            return x;\r\n          //  console.log(x)\r\n            break;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n","export function handleDraw(board) {\r\n    let index = 0;\r\n    /*if ((board[1] === \"X\" || board[1] === \"Y\") &&\r\n        (board[2] === \"X\" || board[2] === \"Y\") &&\r\n        (board[3] === \"X\" || board[3] === \"Y\") &&\r\n        (board[4] === \"X\" || board[4] === \"Y\") &&\r\n        (board[5] === \"X\" || board[5] === \"Y\") &&\r\n        (board[6] === \"X\" || board[6] === \"Y\") &&\r\n        (board[7] === \"X\" || board[7] === \"Y\") &&\r\n        (board[8] === \"X\" || board[8] === \"Y\") &&\r\n        (board[9] === \"X\" || board[9] === \"Y\")) {\r\n        return board[1];\r\n    }*/\r\n    for (var i = 1; i <= board.length; i++) {\r\n        if (board[i] !== \"\") {\r\n            index = index + 1;\r\n        } \r\n    }\r\n    //console.log(index);\r\n    //index = 0;\r\n    if (index === 9) {\r\n        return board[0];\r\n    }\r\n    return null;  \r\n}\r\n\r\n","import React from 'react';\nimport Assemble from './assemble';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"mainApp\">\n      <Assemble />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}